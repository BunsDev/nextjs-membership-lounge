import { ThirdwebSDK } from "@3rdweb/sdk";
import { Center, Container, Text, Heading } from "@chakra-ui/react";
import { ethers } from "ethers";
import { verifyMessage } from "@ethersproject/wallet";
import type { InferGetServerSidePropsType, NextPage } from "next";
import Head from "next/head";
import React from "react";

// Polygon only
const MEMBERSHIP_NFT_CONTRACT_ADDRESS =
  "0x4465aE876e5263cB4Eaf42948723E28bB30C65E8";
const MEMBERSHIP_NFT_TOKEN_ID_REQ = "0";
const MEMBERSHIP_NFT_TOKEN_COUNT_REQ = 1;

const Home: NextPage = ({
  walletAddress,
  balance,
}: InferGetServerSidePropsType<typeof getServerSideProps>) => {
  return (
    <Container>
      <Head>
        <title>thirdweb membership content gate</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/*  */}
      <Center flexDirection="column">
        <Text mb={8} fontSize="xs">
          Fingerprint: {walletAddress} owns {balance} NFT.
        </Text>

        <Heading>Member Only Content</Heading>
        <Text>
          Hello This is private content for people who has the NFT only.
        </Text>
      </Center>
    </Container>
  );
};

export async function getServerSideProps(context: any) {
  const signature = context.query.signature;
  if (!signature) {
    return { redirect: { destination: "/", permanent: false } };
  }

  const provider = ethers.getDefaultProvider("https://polygon-rpc.com");
  const module = new ThirdwebSDK(provider).getCollectionModule(
    MEMBERSHIP_NFT_CONTRACT_ADDRESS
  );

  // TODO: get the nonce from GET /request_access and the number should only be used once.
  const expectedNonce = 42;
  const expectedSignMessage = `I want to enter the lounge. nonce: ${expectedNonce}`;

  const walletAddress = verifyMessage(expectedSignMessage, signature);
  const balance = await module.balanceOf(
    walletAddress,
    MEMBERSHIP_NFT_TOKEN_ID_REQ
  );

  if (balance.toNumber() < MEMBERSHIP_NFT_TOKEN_COUNT_REQ) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  return {
    props: { walletAddress, balance: balance.toNumber() }, // Will be passed to the page component as props
  };
}

export default Home;
