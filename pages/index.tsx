import {
  Box,
  Center,
  Container,
  Text,
  Heading,
  Button,
  Link,
} from "@chakra-ui/react";
import { useWeb3React } from "@web3-react/core";
import { InjectedConnector } from "@web3-react/injected-connector";
import type { NextPage } from "next";
import { useRouter } from "next/router";
import Head from "next/head";
import React, { useCallback, useEffect, useState } from "react";
import { ThirdwebSDK } from "@3rdweb/sdk";

// Polygon only
const injectedConnector = new InjectedConnector({ supportedChainIds: [137] });

const MEMBERSHIP_NFT_CONTRACT_ADDRESS =
  "0x4465aE876e5263cB4Eaf42948723E28bB30C65E8";
const MEMBERSHIP_NFT_TOKEN_ID_REQ = "0";
const MEMBERSHIP_NFT_TOKEN_COUNT_REQ = 1;
const OPENSEA_LINK =
  "https://opensea.io/assets/matic/0x4465ae876e5263cb4eaf42948723e28bb30c65e8/0";

const Home: NextPage = () => {
  const router = useRouter();
  const [showMemberOnlyInfo, setShowMemberOnlyInfo] = useState(false);
  const { account, library, activate } = useWeb3React();

  const enterMemberLounge = useCallback(async () => {
    if (library && account) {
      const signer = library.getSigner(account);
      // request for nonce to prevent signature reply attack
      const reqAccess = await fetch("/api/request_access");
      const reqAccessResp = await reqAccess.json();
      const signature = await signer.signMessage(
        `I want to enter the lounge. one-time access code: ${reqAccessResp.nonce}`
      );
      router.push(`/lounge?signature=${signature}`);
    }
  }, [router, library, account]);

  useEffect(() => {
    async function checkWalletMembership() {
      const signer = library.getSigner(account);
      const module = new ThirdwebSDK(signer).getCollectionModule(
        MEMBERSHIP_NFT_CONTRACT_ADDRESS
      );
      const balance = await module.balance(MEMBERSHIP_NFT_TOKEN_ID_REQ);
      if (balance.toNumber() >= MEMBERSHIP_NFT_TOKEN_COUNT_REQ) {
        setShowMemberOnlyInfo(true);
      }
    }

    if (library && account) {
      checkWalletMembership();
    }
  }, [library, account]);

  return (
    <Container>
      <Head>
        <title>thirdweb membership content gate</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/*  */}
      <Center flexDirection="column">
        <Heading>Member Only Lounge</Heading>
        <Text>
          You need to own Membership NFT in order to get access to the lounge
          webpage. If you own the Membership NFT, you are eligible to reveal
          member-only secret information too.
        </Text>

        <Text mt={4} textAlign="center">
          You need to have at least{" "}
          <Text fontWeight="bold" as="span">
            {MEMBERSHIP_NFT_TOKEN_COUNT_REQ}{" "}
          </Text>
          <Text as="span">of token id </Text>
          <Text fontWeight="bold" as="span">
            {MEMBERSHIP_NFT_TOKEN_ID_REQ}{" "}
          </Text>
          <Text as="span">from NFT address </Text>
          <Text fontWeight="bold" as="span">
            {MEMBERSHIP_NFT_CONTRACT_ADDRESS}{" "}
          </Text>
        </Text>

        <Link mt={4} href={OPENSEA_LINK} color="blue" external>
          View NFT on OpenSea
        </Link>
      </Center>

      {/* Setup wallet connect button and enter lounge button if wallet is connected.
          This method uses server-side to validate that the wallet has the required NFT. */}
      <Box mt={20} textAlign="center">
        {account ? (
          <>
            <Text>Wallet: {account}</Text>
            <Text mt={4}>
              Do you have access to the member only lounge?{" "}
              <Button onClick={() => enterMemberLounge()}>
                Attempt to Enter Private Lounge
              </Button>
            </Text>
            {router.query.denied ? (
              <Text color="red">Access Denied </Text>
            ) : null}
          </>
        ) : (
          <Button onClick={() => activate(injectedConnector)}>
            Connect Wallet (Polygon only)
          </Button>
        )}
      </Box>

      {/* This method uses client-side to conditionally display information based off
          membership nft in the connected wallet */}
      {showMemberOnlyInfo ? (
        <Center mt={8}>
          <Text textAlign="center">
            Only member can see this: our private discord invite link:{" "}
            <Link color="blue" href="https://discord.gg/thirdweb" external>
              https://discord.gg/thirdweb
            </Link>
          </Text>
        </Center>
      ) : null}
    </Container>
  );
};

export default Home;
